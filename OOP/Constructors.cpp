#include <iostream>
#include <string>

using namespace std;

/*
Constructor: function invoked to construct an object
    same name as the class they belong to
    no return type
    needs to be placed in the public area of the class
    default constructor does not have parameters
    if no default constructor is provided in a class, C++ automatically generates one
    default constructo is invoked when an object of the class is created
Default constructor: initializes properties of an object with default values
Parametrized Constructor: receives input parameters and initializes the object with the input values
Note that once we create any type of constructor, we lose the default constructor that is automatically generated by C++

Destructors: function invoked to destroy an object, deallocates memory or files that the object hold
    begins with a tilde sign (~)
    same name as the class they belong to
    no return type
    needs to be placed in the public area of the class
    destructor does not have parameters
    is a member of the class
    only one destructor per class
    never invoke a destructor manually, it is automatically invoked at the end of scope for each object
Destructor is invoked in reverse order as objects are constucted (similar to stack LIFO)
If a class does not have pointers, compiler can automatically destroy objects of that class
    If there are pointers, we need destructors to avoid memory leaks

Copy Constructors: create a new object based on an existing object, copy the object
    same name as the class they belong to
    no return type
    needs to be placed in the public area of the class
    receives one parameter of the same type as the class it belongs to
Copy Constructor is pass by reference since in order to pass by value, we need to copy the value which requires 
    the copy constructor which is a logical error. Copy Constructor should not change the original object so const is used
There is a default copy construct but if there are pointers, we need to provide a copy constructor
Need to copy the values at the memory referenced by a pointer rather than copying the address so that when deallocating 
    memory referenced using destructors, do not free memory that might already be freed by original object destructor
Copy constructor is also used when compiler create a temporary object when passing an object by value to a function
Copy constructor is also used when compiler create a temporary object when returning an object by value from a function
*/

class User {
public:
    string first_name;
    string last_name;
    int age;
    string email;

    int* bank_accounts;
    int bank_accounts_counter;

    // Default Constructor
    User() {
        first_name = "N/A";
        last_name = "N/A";
        age = 0;
        email = "N/A";

        bank_accounts_counter = 2;
        bank_accounts = new int[bank_accounts_counter];
        bank_accounts[0] = 0;
        bank_accounts[1] = 0;

        cout << first_name << " default constructor invoked" << endl;
    }
    // Parametrized Constructor
    User(string first_name, string last_name, int age) {
        this->first_name = first_name;
        this->last_name = last_name;
        this->age = age;
        this->email = first_name + last_name + "@gmail.com";

        bank_accounts_counter = 2;
        bank_accounts = new int[bank_accounts_counter];
        bank_accounts[0] = 1000;
        bank_accounts[1] = 5000;

        cout << first_name << " constructor invoked" << endl;
    }
    // Destructor
    ~User() {
        delete [] bank_accounts;    // Deallocates the memory
        bank_accounts = nullptr;
        cout << first_name << " destructor invoked" << endl;
    }
    // Copy Constructor
    User(const User &original) {
        this->first_name = original.first_name;
        this->last_name = original.last_name;
        this->age = original.age;
        this->email = original.first_name + original.last_name + "@gmail.com";

        this->bank_accounts_counter = original.bank_accounts_counter;
        bank_accounts = new int[bank_accounts_counter];
        for(int i = 0; i < bank_accounts_counter; i++) {
            bank_accounts[i] = original.bank_accounts[i];
        }

        cout << first_name << " copy constructor invoked" << endl;
    }

    void print_info() {
        cout << "First name: " << first_name << endl;
        cout << "Last name: " << last_name << endl;
        cout << "Age: " << age << endl;
        cout << "Email: " << email << endl;

        cout << "Amount in banks: ";
        for(int i = 0; i < bank_accounts_counter; i++) {
            cout << bank_accounts[i] << "\t";
        }
        cout << endl;
    }
};

int main(void) {
    User u1;            // default constructor
    u1.print_info();

    cout << endl;

    User u2("Jake", "Wronskian", 18);   // parametrized constructor
    u2.print_info();

    cout << endl;

    User u3(u2);        // u3 is a copy of u2 using a copy constructor
    //User u3 = u2;     // alternative syntax of invoking a copy constructor usign assignment operator
    u3.print_info();

    cout << endl;

    return 0;
}